/**
 * Mock WalletConnect EthereumProvider
 * This is a simplified version that provides the minimum functionality needed
 */
(function() {
    class EthereumProvider {
        constructor() {
            this.events = {};
        }

        async init(options) {
            console.log("Mock EthereumProvider initialized with options:", options);
            return this;
        }

        async enable() {
            console.log("Mock EthereumProvider enabled");
            return ["0x0000000000000000000000000000000000000000"];
        }

        on(event, listener) {
            if (!this.events[event]) {
                this.events[event] = [];
            }
            this.events[event].push(listener);
        }

        removeListener(event, listener) {
            if (!this.events[event]) return;
            this.events[event] = this.events[event].filter(l => l !== listener);
        }

        async request(payload) {
            console.log("Mock EthereumProvider request:", payload);
            
            switch (payload.method) {
                case 'eth_accounts':
                    return ["0x0000000000000000000000000000000000000000"];
                case 'eth_chainId':
                    return "0x1";
                default:
                    return null;
            }
        }

        async disconnect() {
            console.log("Mock EthereumProvider disconnected");
            if (this.events['disconnect']) {
                this.events['disconnect'].forEach(listener => listener());
            }
        }
    }

    // Register the provider globally
    window.WalletConnectEthereumProvider = {
        init: async (options) => {
            console.log("Creating mock WalletConnect EthereumProvider");
            return new EthereumProvider();
        }
    };
})(); 