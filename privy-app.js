/**
 * Seismic App - –¢–û–õ–¨–ö–û Privy –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
 */

document.addEventListener('DOMContentLoaded', async () => {
    console.log("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Seismic App —Å –¢–û–õ–¨–ö–û Privy –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π");
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Seismic SDK
    const seismic = window.SeismicSDK ? new SeismicSDK() : null;
    
    // –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    let transactionHistory = [];
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ localStorage
    try {
        const savedHistory = localStorage.getItem('transactionHistory');
        if (savedHistory) {
            transactionHistory = JSON.parse(savedHistory);
            console.log(`üìú –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${transactionHistory.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏`);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
        localStorage.removeItem('transactionHistory');
    }
    
    // DOM —ç–ª–µ–º–µ–Ω—Ç—ã
    const connectBtn = document.getElementById('connect-wallet');
    const disconnectBtn = document.getElementById('disconnect-wallet');
    const userAddress = document.getElementById('user-address');
    const userBalance = document.getElementById('user-balance');
    const refreshBalanceBtn = document.getElementById('refresh-balance');
    const copyAddressBtn = document.getElementById('copy-address');
    const connectionStatus = document.getElementById('connection-status');
    const networkBadge = document.getElementById('network-badge');
    const userInfo = document.getElementById('user-info');
    const userEmail = document.getElementById('user-email');
    const userPhone = document.getElementById('user-phone');
    const userWallets = document.getElementById('user-wallets');
    const walletAddress = document.getElementById('wallet-address');
    
    // –§–æ—Ä–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const transactionForm = document.getElementById('transaction-form');
    const recipientAddress = document.getElementById('recipient-address');
    const amount = document.getElementById('amount');
    const sendTransactionBtn = document.getElementById('send-transaction-btn');
    
    // –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    const noTransactions = document.getElementById('no-transactions');
    const transactionHistoryDiv = document.getElementById('transaction-history');
    const transactionList = document.getElementById('transaction-list');
    const clearHistoryBtn = document.getElementById('clear-history');
    
    // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
    const loadingOverlay = document.getElementById('loading-overlay');
    const loadingText = document.getElementById('loading-text');
    const transactionModal = new bootstrap.Modal(document.getElementById('transaction-modal'));
    const transactionResult = document.getElementById('transaction-result');
    const txExplorerLink = document.getElementById('tx-explorer-link');
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
     */
    function showLoading(text = '–ó–∞–≥—Ä—É–∑–∫–∞...') {
        loadingText.textContent = text;
        loadingOverlay.classList.remove('d-none');
    }
    
    /**
     * –°–∫—Ä—ã—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
     */
    function hideLoading() {
        loadingOverlay.classList.add('d-none');
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    function showSuccess(message) {
        const alert = document.createElement('div');
        alert.className = 'alert alert-success alert-dismissible fade show position-fixed';
        alert.style.cssText = 'top: 20px; right: 20px; z-index: 10000; min-width: 300px;';
        alert.innerHTML = `
            <i class="bi bi-check-circle me-2"></i>
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        document.body.appendChild(alert);
        
        setTimeout(() => {
            if (alert.parentNode) {
                alert.parentNode.removeChild(alert);
            }
        }, 5000);
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
     */
    function showError(message) {
        const alert = document.createElement('div');
        alert.className = 'alert alert-danger alert-dismissible fade show position-fixed';
        alert.style.cssText = 'top: 20px; right: 20px; z-index: 10000; min-width: 300px;';
        alert.innerHTML = `
            <i class="bi bi-exclamation-triangle me-2"></i>
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        document.body.appendChild(alert);
        
        setTimeout(() => {
            if (alert.parentNode) {
                alert.parentNode.removeChild(alert);
            }
        }, 7000);
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞
     */
    function updateConnectedUI() {
        if (!window.privyWalletConnector.isConnected()) return;
        
        const address = window.privyWalletConnector.getSelectedAccount();
        const userInfo = window.privyWalletConnector.getUserInfo();
        
        if (address) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            connectBtn.classList.add('d-none');
            disconnectBtn.classList.remove('d-none');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥—Ä–µ—Å
            const shortAddress = `${address.substring(0, 6)}...${address.substring(address.length - 4)}`;
            userAddress.value = address;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å
            if (walletAddress) {
                walletAddress.querySelector('span').textContent = address;
                walletAddress.classList.remove('d-none');
            }
            
            // –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏
            copyAddressBtn.disabled = false;
            refreshBalanceBtn.disabled = false;
            sendTransactionBtn.disabled = false;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            connectionStatus.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω';
            connectionStatus.className = 'badge bg-success';
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ç—å
            networkBadge.textContent = 'Ethereum';
            networkBadge.className = 'badge bg-success';
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            if (userInfo) {
                document.getElementById('user-email').textContent = userInfo.email || '-';
                document.getElementById('user-phone').textContent = userInfo.phone || '-';
                document.getElementById('user-wallets').textContent = userInfo.wallets?.length || 0;
                document.getElementById('user-info').classList.remove('d-none');
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            refreshBalance();
            
            console.log('‚úÖ UI –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞');
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞
     */
    function updateDisconnectedUI() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        connectBtn.classList.remove('d-none');
        disconnectBtn.classList.add('d-none');
        
        // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        userAddress.value = '';
        userBalance.value = '';
        
        // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å
        if (walletAddress) {
            walletAddress.classList.add('d-none');
        }
        
        // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏
        copyAddressBtn.disabled = true;
        refreshBalanceBtn.disabled = true;
        sendTransactionBtn.disabled = true;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        connectionStatus.textContent = '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω';
        connectionStatus.className = 'badge bg-secondary';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ç—å
        networkBadge.textContent = '–ù–µ –≤—ã–±—Ä–∞–Ω–∞';
        networkBadge.className = 'badge bg-secondary';
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        document.getElementById('user-info').classList.add('d-none');
        
        console.log('üîå UI –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞');
    }
    
    /**
     * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ —á–µ—Ä–µ–∑ Privy
     */
    async function connectWallet() {
        try {
            showLoading('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Privy...');
            
            console.log('üîó –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Privy');
            
            const wallet = await window.privyWalletConnector.connect();
            
            if (wallet) {
                console.log('‚úÖ –ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω:', wallet);
                updateConnectedUI();
                showSuccess('–ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ Privy!');
            } else {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∞');
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞:', error);
            showError('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞: ' + error.message);
        } finally {
            hideLoading();
        }
    }
    
    /**
     * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
     */
    async function disconnectWallet() {
        try {
            showLoading('–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞...');
            
            console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞');
            
            await window.privyWalletConnector.disconnect();
            updateDisconnectedUI();
            showSuccess('–ö–æ—à–µ–ª–µ–∫ –æ—Ç–∫–ª—é—á–µ–Ω');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞:', error);
            showError('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞: ' + error.message);
        } finally {
            hideLoading();
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
     */
    async function refreshBalance() {
        try {
            const address = window.privyWalletConnector.getSelectedAccount();
            if (!address) return;
            
            console.log('üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è', address);
            
            const balance = await window.privyWalletConnector.getBalance(address);
            userBalance.value = balance + ' ETH';
            
            console.log('‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω:', balance);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
            userBalance.value = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏';
        }
    }
    
    /**
     * –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
     */
    function copyAddress() {
        const address = userAddress.value;
        if (address) {
            navigator.clipboard.writeText(address).then(() => {
                showSuccess('–ê–¥—Ä–µ—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
            }).catch(() => {
                showError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å');
            });
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
     */
    async function sendTransaction(event) {
        event.preventDefault();
        
        try {
            if (!window.privyWalletConnector.isConnected()) {
                showError('–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫');
                return;
            }
            
            const to = recipientAddress.value.trim();
            const value = amount.value.trim();
            
            if (!to || !value) {
                showError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
                return;
            }
            
            if (parseFloat(value) <= 0) {
                showError('–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0');
                return;
            }
            
            showLoading('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
            
            console.log('üí∏ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', { to, value });
            
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ETH –≤ Wei
            const valueInWei = '0x' + (parseFloat(value) * Math.pow(10, 18)).toString(16);
            
            const txParams = {
                to: to,
                value: valueInWei,
                from: window.privyWalletConnector.getSelectedAccount()
            };
            
            const txHash = await window.privyWalletConnector.sendTransaction(txParams);
            
            console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:', txHash);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            const transaction = {
                hash: txHash,
                to: to,
                value: value,
                timestamp: Date.now(),
                status: 'pending'
            };
            
            transactionHistory.unshift(transaction);
            saveTransactionHistory();
            updateTransactionHistory();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            showTransactionResult(txHash, to, value);
            
            // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
            recipientAddress.value = '';
            amount.value = '';
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
            setTimeout(refreshBalance, 2000);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
            showError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ' + error.message);
        } finally {
            hideLoading();
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
     */
    function showTransactionResult(txHash, to, value) {
        transactionResult.innerHTML = `
            <div class="alert alert-success">
                <h6><i class="bi bi-check-circle me-2"></i>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</h6>
                <p class="mb-2"><strong>Hash:</strong> <code>${txHash}</code></p>
                <p class="mb-2"><strong>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</strong> <code>${to}</code></p>
                <p class="mb-0"><strong>–°—É–º–º–∞:</strong> ${value} ETH</p>
            </div>
        `;
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ explorer
        txExplorerLink.href = `https://etherscan.io/tx/${txHash}`;
        txExplorerLink.classList.remove('d-none');
        
        transactionModal.show();
    }
    
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
     */
    function saveTransactionHistory() {
        try {
            localStorage.setItem('transactionHistory', JSON.stringify(transactionHistory));
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', error);
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
     */
    function updateTransactionHistory() {
        if (transactionHistory.length === 0) {
            noTransactions.classList.remove('d-none');
            transactionHistoryDiv.classList.add('d-none');
        } else {
            noTransactions.classList.add('d-none');
            transactionHistoryDiv.classList.remove('d-none');
            
            transactionList.innerHTML = transactionHistory.map(tx => `
                <div class="card mb-2">
                    <div class="card-body">
                        <div class="row align-items-center">
                            <div class="col-md-6">
                                <small class="text-muted">Hash:</small><br>
                                <code class="small">${tx.hash.substring(0, 20)}...</code>
                            </div>
                            <div class="col-md-3">
                                <small class="text-muted">–°—É–º–º–∞:</small><br>
                                <strong>${tx.value} ETH</strong>
                            </div>
                            <div class="col-md-3">
                                <small class="text-muted">–î–∞—Ç–∞:</small><br>
                                <small>${new Date(tx.timestamp).toLocaleString()}</small>
                            </div>
                        </div>
                        <div class="mt-2">
                            <a href="https://etherscan.io/tx/${tx.hash}" target="_blank" class="btn btn-sm btn-outline-primary">
                                <i class="bi bi-box-arrow-up-right"></i> Explorer
                            </a>
                        </div>
                    </div>
                </div>
            `).join('');
        }
    }
    
    /**
     * –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
     */
    function clearTransactionHistory() {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π?')) {
            transactionHistory = [];
            saveTransactionHistory();
            updateTransactionHistory();
            showSuccess('–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –æ—á–∏—â–µ–Ω–∞');
        }
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    async function initializeApp() {
        try {
            showLoading('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
            
            console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Privy Wallet Connector');
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Privy –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä
            const initialized = await window.privyWalletConnector.initialize();
            
            if (!initialized) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Privy');
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Seismic SDK –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if (seismic) {
                console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Seismic SDK');
                await seismic.initialize({
                    network: window.seismicConfig?.network || {
                        chainId: 1,
                        name: "Ethereum",
                        rpcUrl: "https://mainnet.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161"
                    },
                    encryptionEnabled: true
                });
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            updateTransactionHistory();
            
            console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            showError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ' + error.message);
        } finally {
            hideLoading();
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    connectBtn.addEventListener('click', connectWallet);
    disconnectBtn.addEventListener('click', disconnectWallet);
    refreshBalanceBtn.addEventListener('click', refreshBalance);
    copyAddressBtn.addEventListener('click', copyAddress);
    transactionForm.addEventListener('submit', sendTransaction);
    clearHistoryBtn.addEventListener('click', clearTransactionHistory);
    
    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç Privy
    document.addEventListener('wallet:connected', (event) => {
        console.log('üì° –°–æ–±—ã—Ç–∏–µ wallet:connected', event.detail);
        updateConnectedUI();
    });
    
    document.addEventListener('wallet:disconnected', (event) => {
        console.log('üì° –°–æ–±—ã—Ç–∏–µ wallet:disconnected', event.detail);
        updateDisconnectedUI();
    });
    
    document.addEventListener('wallet:created', (event) => {
        console.log('üì° –°–æ–±—ã—Ç–∏–µ wallet:created', event.detail);
        showSuccess('–ù–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫ —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ Privy!');
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    await initializeApp();
    
    console.log('üéâ Seismic App —Å –¢–û–õ–¨–ö–û Privy –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
}); 