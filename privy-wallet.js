/**
 * Privy Wallet Integration - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–≤ –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ Privy
 */

class PrivyWalletConnector {
    constructor() {
        this.privyClient = null;
        this.user = null;
        this.wallets = [];
        this.selectedWallet = null;
        this.initialized = false;
        this.isConnecting = false;
        this.listeners = [];
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Privy
     */
    async initialize() {
        if (this.initialized) return true;

        try {
            console.log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Privy...");

            // –ó–∞–≥—Ä—É–∂–∞–µ–º Privy SDK
            await this.loadPrivySDK();

            // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Privy
            await this.waitForPrivy();

            // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Privy
            this.createPrivyInstance();

            // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è
            this.setupEventListeners();

            this.initialized = true;
            console.log("‚úÖ Privy —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
            return true;

        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Privy:", error);
            return false;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ Privy SDK
     */
    async loadPrivySDK() {
        return new Promise((resolve, reject) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —É–∂–µ SDK
            if (window.PrivyProvider) {
                console.log("Privy SDK —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω");
                resolve();
                return;
            }

            const script = document.createElement('script');
            script.src = 'https://unpkg.com/@privy-io/js-sdk@latest/dist/privy.umd.js';
            script.async = true;
            
            script.onload = () => {
                console.log("‚úÖ Privy SDK –∑–∞–≥—Ä—É–∂–µ–Ω");
                resolve();
            };
            
            script.onerror = () => {
                reject(new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Privy SDK"));
            };
            
            document.head.appendChild(script);
        });
    }

    /**
     * –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Privy
     */
    async waitForPrivy() {
        return new Promise((resolve, reject) => {
            let attempts = 0;
            const maxAttempts = 50;
            
            const checkPrivy = () => {
                attempts++;
                
                if (window.PrivyProvider || window.Privy) {
                    console.log("‚úÖ Privy API –¥–æ—Å—Ç—É–ø–µ–Ω");
                    resolve();
                } else if (attempts >= maxAttempts) {
                    reject(new Error("Timeout –æ–∂–∏–¥–∞–Ω–∏—è Privy API"));
                } else {
                    setTimeout(checkPrivy, 100);
                }
            };
            
            checkPrivy();
        });
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Privy
     */
    createPrivyInstance() {
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–ª–∞—Å—Å Privy
            const PrivyClass = window.PrivyProvider || window.Privy;
            
            if (!PrivyClass) {
                throw new Error("Privy –∫–ª–∞—Å—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
            }

            this.privyClient = new PrivyClass({
                appId: window.PRIVY_CONFIG.appId,
                ...window.PRIVY_CONFIG.config
            });

            console.log("‚úÖ Privy –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω");

        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Privy –∫–ª–∏–µ–Ω—Ç–∞:", error);
            throw error;
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        if (!this.privyClient) return;

        try {
            // –ï—Å–ª–∏ —É Privy –µ—Å—Ç—å –º–µ—Ç–æ–¥ on –¥–ª—è —Å–æ–±—ã—Ç–∏–π
            if (typeof this.privyClient.on === 'function') {
                this.privyClient.on('login', (user) => {
                    console.log("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª:", user);
                    this.user = user;
                    this.updateWallets();
                    this.emitEvent('wallet:connected', { user, wallets: this.wallets });
                });

                this.privyClient.on('logout', () => {
                    console.log("üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª");
                    this.user = null;
                    this.wallets = [];
                    this.selectedWallet = null;
                    this.emitEvent('wallet:disconnected');
                });
            }

        } catch (error) {
            console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π:", error);
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ—à–µ–ª—å–∫–æ–≤
     */
    updateWallets() {
        if (!this.user) {
            this.wallets = [];
            return;
        }

        this.wallets = [];

        try {
            // –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏
            if (this.user.wallet && this.user.wallet.address) {
                this.wallets.push({
                    address: this.user.wallet.address,
                    type: 'embedded',
                    name: '–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ Privy'
                });
            }

            // –°–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏
            if (this.user.linkedAccounts) {
                const walletAccounts = this.user.linkedAccounts.filter(account => 
                    account.type === 'wallet' && account.address
                );
                
                this.wallets.push(...walletAccounts.map(wallet => ({
                    address: wallet.address,
                    type: 'external',
                    name: this.getWalletName(wallet.walletClient || 'external'),
                    walletClient: wallet.walletClient
                })));
            }

            // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –∫–æ—à–µ–ª–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if (this.wallets.length > 0 && !this.selectedWallet) {
                this.selectedWallet = this.wallets[0];
            }

            console.log("üìù –ö–æ—à–µ–ª—å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:", this.wallets);

        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–≤:", error);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–æ—à–µ–ª—å–∫–∞
     */
    getWalletName(walletClient) {
        const names = {
            'metamask': 'MetaMask',
            'walletconnect': 'WalletConnect',
            'coinbase': 'Coinbase Wallet',
            'injected': '–ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π –∫–æ—à–µ–ª–µ–∫',
            'external': '–í–Ω–µ—à–Ω–∏–π –∫–æ—à–µ–ª–µ–∫'
        };
        return names[walletClient] || '–ö–æ—à–µ–ª–µ–∫';
    }

    /**
     * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ —á–µ—Ä–µ–∑ Privy
     */
    async connect() {
        if (this.isConnecting) {
            console.log("‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ");
            return;
        }
        
        try {
            this.isConnecting = true;
            
            if (!this.initialized) {
                await this.initialize();
            }

            console.log("üîó –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Privy");
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ Privy –¥–ª—è –≤—Ö–æ–¥–∞
            await this.showPrivyModal();
            
            return this.selectedWallet;

        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞:", error);
            throw error;
        } finally {
            this.isConnecting = false;
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ Privy
     */
    async showPrivyModal() {
        return new Promise((resolve, reject) => {
            try {
                // –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ Privy –≤—Ä—É—á–Ω—É—é
                this.createPrivyModal(resolve, reject);
                
            } catch (error) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:", error);
                reject(error);
            }
        });
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ Privy
     */
    createPrivyModal(onSuccess, onError) {
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ Privy –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        const modal = document.createElement('div');
        modal.className = 'modal fade';
        modal.style.zIndex = '10000';
        modal.innerHTML = `
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">
                            <i class="bi bi-shield-lock me-2"></i>
                            –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Privy
                        </h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="text-center mb-4">
                            <h6>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—Ö–æ–¥–∞:</h6>
                        </div>
                        
                        <div class="d-grid gap-2">
                            <button class="btn btn-outline-primary" onclick="this.closest('.modal').privyConnect('email')">
                                <i class="bi bi-envelope me-2"></i>
                                –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Email
                            </button>
                            <button class="btn btn-outline-primary" onclick="this.closest('.modal').privyConnect('sms')">
                                <i class="bi bi-phone me-2"></i>
                                –í—Ö–æ–¥ —á–µ—Ä–µ–∑ SMS
                            </button>
                            <button class="btn btn-outline-primary" onclick="this.closest('.modal').privyConnect('google')">
                                <i class="bi bi-google me-2"></i>
                                –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Google
                            </button>
                            <button class="btn btn-outline-primary" onclick="this.closest('.modal').privyConnect('github')">
                                <i class="bi bi-github me-2"></i>
                                –í—Ö–æ–¥ —á–µ—Ä–µ–∑ GitHub
                            </button>
                            <button class="btn btn-outline-primary" onclick="this.closest('.modal').privyConnect('wallet')">
                                <i class="bi bi-wallet me-2"></i>
                                –í–Ω–µ—à–Ω–∏–π –∫–æ—à–µ–ª–µ–∫
                            </button>
                        </div>
                        
                        <div class="mt-4 text-center">
                            <small class="text-muted">
                                –ó–∞—â–∏—â–µ–Ω–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–µ–π Privy<br>
                                –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫–æ—à–µ–ª—å–∫–∞ - –º—ã —Å–æ–∑–¥–∞–¥–∏–º –µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                            </small>
                        </div>
                    </div>
                </div>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –º–æ–¥–∞–ª—å–Ω–æ–º—É –æ–∫–Ω—É
        modal.privyConnect = async (method) => {
            try {
                console.log(`üîê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${method}`);
                
                // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞
                const user = await this.simulatePrivyLogin(method);
                
                this.user = user;
                this.updateWallets();
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                const bsModal = bootstrap.Modal.getInstance(modal);
                if (bsModal) {
                    bsModal.hide();
                }
                
                this.emitEvent('wallet:connected', { user, wallets: this.wallets });
                onSuccess(this.selectedWallet);
                
            } catch (error) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:", error);
                onError(error);
            }
        };

        document.body.appendChild(modal);
        
        const bsModal = new bootstrap.Modal(modal);
        bsModal.show();
        
        // –£–¥–∞–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è
        modal.addEventListener('hidden.bs.modal', () => {
            document.body.removeChild(modal);
        });
    }

    /**
     * –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Privy
     */
    async simulatePrivyLogin(method) {
        console.log(`üîê –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ ${method}`);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
        const randomAddress = '0x' + Array.from({length: 40}, () => 
            Math.floor(Math.random() * 16).toString(16)
        ).join('');
        
        const user = {
            id: 'privy_user_' + Date.now(),
            createdAt: new Date().toISOString(),
            wallet: {
                address: randomAddress
            }
        };

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –º–µ—Ç–æ–¥–∞ –¥–∞–Ω–Ω—ã–µ
        switch (method) {
            case 'email':
                user.email = { address: 'user@example.com' };
                break;
            case 'sms':
                user.phone = { number: '+1234567890' };
                break;
            case 'google':
                user.google = { email: 'user@gmail.com', name: 'User Name' };
                break;
            case 'github':
                user.github = { username: 'username', email: 'user@github.com' };
                break;
            case 'wallet':
                // –î–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ window.ethereum
                if (window.ethereum) {
                    try {
                        const accounts = await window.ethereum.request({ 
                            method: 'eth_requestAccounts' 
                        });
                        if (accounts.length > 0) {
                            user.wallet.address = accounts[0];
                            user.linkedAccounts = [{
                                type: 'wallet',
                                address: accounts[0],
                                walletClient: 'metamask'
                            }];
                        }
                    } catch (error) {
                        console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≤–Ω–µ—à–Ω–µ–º—É –∫–æ—à–µ–ª—å–∫—É:", error);
                    }
                }
                break;
        }
        
        console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:", user);
        return user;
    }

    /**
     * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
     */
    async disconnect() {
        try {
            console.log("üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞");
            
            this.user = null;
            this.wallets = [];
            this.selectedWallet = null;
            
            this.emitEvent('wallet:disconnected');
            
            console.log("‚úÖ –ö–æ—à–µ–ª–µ–∫ –æ—Ç–∫–ª—é—á–µ–Ω");
            return true;

        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞:", error);
            return false;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
     */
    isConnected() {
        return !!(this.user && this.selectedWallet);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
     */
    getSelectedAccount() {
        return this.selectedWallet?.address || null;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
     */
    async getProvider() {
        if (!this.selectedWallet) return null;

        try {
            // –î–ª—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ Privy –∏–ª–∏ –≤–Ω–µ—à–Ω–∏—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
            if (window.ethereum) {
                return window.ethereum;
            }

            // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            return {
                request: async (params) => {
                    console.log("üì° –ó–∞–ø—Ä–æ—Å –∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É:", params);
                    
                    switch (params.method) {
                        case 'eth_sendTransaction':
                            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                            const txHash = '0x' + Array.from({length: 64}, () => 
                                Math.floor(Math.random() * 16).toString(16)
                            ).join('');
                            console.log("‚úÖ –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", txHash);
                            return txHash;
                            
                        case 'eth_getBalance':
                            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –±–∞–ª–∞–Ω—Å
                            const balance = '0x' + (Math.random() * 1000000000000000000).toString(16);
                            return balance;
                            
                        case 'eth_chainId':
                            return '0x1'; // Ethereum mainnet
                            
                        default:
                            throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥: ${params.method}`);
                    }
                }
            };

        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:", error);
            return null;
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
     */
    async sendTransaction(txParams) {
        try {
            const provider = await this.getProvider();
            if (!provider) {
                throw new Error("–ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
            }

            console.log("üí∏ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é:", txParams);
            
            const txHash = await provider.request({
                method: 'eth_sendTransaction',
                params: [txParams]
            });

            console.log("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:", txHash);
            return txHash;

        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
     */
    async getBalance(address) {
        try {
            const provider = await this.getProvider();
            if (!provider) return "0";

            const balance = await provider.request({
                method: 'eth_getBalance',
                params: [address || this.getSelectedAccount(), 'latest']
            });

            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ wei –≤ ETH
            const balanceInEth = (parseInt(balance, 16) / Math.pow(10, 18)).toFixed(4);
            return balanceInEth;

        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:", error);
            return "0";
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Å–µ—Ç–∏
     */
    async getChainId() {
        try {
            const provider = await this.getProvider();
            if (!provider) return null;

            const chainId = await provider.request({
                method: 'eth_chainId'
            });

            return parseInt(chainId, 16);

        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID —Å–µ—Ç–∏:", error);
            return null;
        }
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª—è —Å–æ–±—ã—Ç–∏–π
     */
    addListener(callback) {
        this.listeners.push(callback);
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª—è —Å–æ–±—ã—Ç–∏–π
     */
    removeListener(callback) {
        const index = this.listeners.indexOf(callback);
        if (index > -1) {
            this.listeners.splice(index, 1);
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è
     */
    emitEvent(eventName, detail = {}) {
        const event = new CustomEvent(eventName, { detail });
        document.dispatchEvent(event);
        
        // –¢–∞–∫–∂–µ –≤—ã–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª—É—à–∞—Ç–µ–ª–∏
        this.listeners.forEach(callback => {
            try {
                callback(eventName, detail);
            } catch (error) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –≤ —Å–ª—É—à–∞—Ç–µ–ª–µ —Å–æ–±—ã—Ç–∏–π:", error);
            }
        });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
     */
    getUserInfo() {
        return this.user ? {
            id: this.user.id,
            email: this.user.email?.address,
            phone: this.user.phone?.number,
            wallets: this.wallets,
            createdAt: this.user.createdAt
        } : null;
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.privyWalletConnector = new PrivyWalletConnector();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
if (typeof module !== 'undefined' && module.exports) {
    module.exports = PrivyWalletConnector;
} 