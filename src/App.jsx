import React from 'react';
import { PrivyProvider, usePrivy } from '@privy-io/react-auth';
import WalletInfo from './components/WalletInfo';
import './App.css'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∏–ª–∏

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
import { seismicConfig } from '../seismic-config.js';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
function AppContent() {
    const { ready, authenticated, user, login, logout } = usePrivy();

    if (!ready) {
        return (
            <div className="loading-container">
                <div className="loading-spinner"></div>
                <p>–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Privy React Auth SDK...</p>
            </div>
        );
    }

    return (
        <div className="app-container">
            <header className="app-header">
                <h1>üåä Seismic Game</h1>
                <p>–ë–ª–æ–∫—á–µ–π–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å Privy React Auth SDK</p>
            </header>

            <main className="app-main">
                {!authenticated ? (
                    <div className="auth-section">
                        <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</h2>
                        <p>–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∏–≥—Ä—É</p>
                        <button 
                            className="connect-button"
                            onClick={login}
                        >
                            üîê –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫
                        </button>
                        <div className="info-text">
                            <p>‚ú® –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è MetaMask, WalletConnect –∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ Privy</p>
                            <p>üîí –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Privy</p>
                            <p>üåê –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Seismic Devnet</p>
                        </div>
                    </div>
                ) : (
                    <div className="user-section">
                        <div className="user-info">
                            <h2>‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!</h2>
                            <div className="user-details">
                                <p><strong>ID:</strong> {user?.id}</p>
                                {user?.wallet?.address && (
                                    <p><strong>–ö–æ—à–µ–ª–µ–∫:</strong> <code>{user.wallet.address}</code></p>
                                )}
                                {user?.email?.address && (
                                    <p><strong>Email:</strong> {user.email.address}</p>
                                )}
                                <p><strong>–°–æ–∑–¥–∞–Ω:</strong> {user?.createdAt ? new Date(user.createdAt).toLocaleString('ru-RU') : 'N/A'}</p>
                            </div>
                        </div>

                        {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ—à–µ–ª—å–∫–µ */}
                        <WalletInfo />

                        <div className="actions">
                            <button 
                                className="action-button game-button"
                                onClick={() => {
                                    alert('üéÆ –ò–≥—Ä–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!');
                                }}
                            >
                                üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
                            </button>
                            
                            <button 
                                className="action-button wallet-button"
                                onClick={() => {
                                    console.log('User data:', user);
                                    console.log('Wallet info:', user?.wallet);
                                    console.log('Linked accounts:', user?.linkedAccounts);
                                    alert('üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—à–µ–ª—å–∫–µ –≤ –∫–æ–Ω—Å–æ–ª–∏');
                                }}
                            >
                                üëõ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—à–µ–ª—å–∫–µ
                            </button>

                            <button 
                                className="action-button network-button"
                                onClick={async () => {
                                    try {
                                        // –î–æ–±–∞–≤–ª—è–µ–º Seismic —Å–µ—Ç—å –≤ MetaMask
                                        await window.ethereum.request({
                                            method: 'wallet_addEthereumChain',
                                            params: [{
                                                chainId: `0x${seismicConfig.network.chainId.toString(16)}`,
                                                chainName: seismicConfig.network.name,
                                                nativeCurrency: seismicConfig.network.nativeCurrency,
                                                rpcUrls: [seismicConfig.network.rpcUrl],
                                                blockExplorerUrls: [seismicConfig.network.explorer]
                                            }]
                                        });
                                        alert('‚úÖ Seismic —Å–µ—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ—à–µ–ª–µ–∫!');
                                    } catch (error) {
                                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–µ—Ç–∏:', error);
                                        alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.');
                                    }
                                }}
                            >
                                üåê –î–æ–±–∞–≤–∏—Ç—å Seismic —Å–µ—Ç—å
                            </button>
                            
                            <button 
                                className="action-button logout-button"
                                onClick={logout}
                            >
                                üö™ –í—ã–π—Ç–∏
                            </button>
                        </div>

                        <div className="network-info">
                            <h3>üåê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏</h3>
                            <div className="network-details">
                                <p><strong>–°–µ—Ç—å:</strong> {seismicConfig.network.name}</p>
                                <p><strong>Chain ID:</strong> <code>{seismicConfig.network.chainId}</code></p>
                                <p><strong>RPC:</strong> <a href={seismicConfig.network.rpcUrl} target="_blank" rel="noopener noreferrer">{seismicConfig.network.rpcUrl}</a></p>
                                <p><strong>Explorer:</strong> <a href={seismicConfig.network.explorer} target="_blank" rel="noopener noreferrer">–û—Ç–∫—Ä—ã—Ç—å explorer</a></p>
                                <p><strong>Faucet:</strong> <a href={seismicConfig.network.faucet} target="_blank" rel="noopener noreferrer">–ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã</a></p>
                            </div>
                        </div>
                    </div>
                )}
            </main>

            <footer className="app-footer">
                <p>&copy; 2024 Seismic Game. Powered by Privy React Auth</p>
            </footer>
        </div>
    );
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å Privy Provider
function App() {
    return (
        <PrivyProvider 
            appId={seismicConfig.privy.appId}
            config={seismicConfig.privy.config}
        >
            <AppContent />
        </PrivyProvider>
    );
}

export default App; 